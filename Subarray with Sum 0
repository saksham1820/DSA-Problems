Link: https://practice.geeksforgeeks.org/problems/subarray-with-0-sum-1587115621/1

Given an array of positive and negative numbers. Find if there is a subarray (of size at-least one) with 0 sum.

Input:
5
4 2 -3 1 6

Output: 
Yes

Explanation: 
2, -3, 1 is the subarray 
with sum 0.

Solution:
1. Brute Force - O(n^2)
2. O(n) - 
class Solution{
    public:
    //Complete this function
    //Function to check whether there is a subarray present with 0-sum or not.
    bool subArrayExists(int arr[], int n)
    {
        //Your code here
        unordered_map<int, int> map;
        map.insert({arr[0], 0});
        int sum = arr[0];
        //cout<<map[4]<<endl;
        for(int i = 1; i < n; i++){
            sum+=arr[i];
            if(map.count(sum) || arr[i] == 0 || sum == 0){
                return 1;
            }
            map[sum] = i;
        }
        
        // for(auto i = map.begin(); i != map.end(); i++){
        //     cout<<i->first<<" "<<i->second<<endl;
        // }
        return 0;
    }
};