Link: https://practice.geeksforgeeks.org/problems/row-with-max-1s0023/1#

Given a boolean 2D array of n x m dimensions where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's.

Input: 
N = 4 , M = 4
Arr[][] = {{0, 1, 1, 1},
           {0, 0, 1, 1},
           {1, 1, 1, 1},
           {0, 0, 0, 0}}
Output: 2
Explanation: Row 2 contains 4 1's (0-based
indexing).

Solution:
1. Brute Force - 
int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
	int max_row_count = 0, idx = -1, i, j;
	for(i = 0; i < n; i++){
	    int count = 0;
	    for(j = 0; j < m; j++){
	        if(arr[i][j] == 1){
	            count++;
	        }
	    }	        
	    if(count > max_row_count){
	        max_row_count = count;
	        idx = i;
	    }
	}
	return idx;
}
2. O(n+m) Solution - 
for(int i = 0; i < n; i++){
	       while(end >= 0){
	           if(arr[i][end] == 1){
	               end--;
	           }
	           else{
	               break;
	           }
	       }
	       if(end < col_idx){
	           col_idx = end; 
	           idx = i;
	       }
	   }
	   if(end == m-1){
	       return -1;
	   }
	   return idx;
	}