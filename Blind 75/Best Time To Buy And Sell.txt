https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

1. Brute Force - O(n^2), O(1)
2. Two Pointer - O(n), O(1)
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int pointer1 = 0;
        int pointer2 = 1;
        int max_res = 0;
        if(prices.size() <= 1){
            return max_res;
        }
        if((prices[pointer2] - prices[pointer1]) > 0){
            max_res = prices[pointer2] - prices[pointer1];
        }
        while(pointer2 < prices.size()){
            if(prices[pointer1]>prices[pointer2]){
                pointer1 = pointer2;
            }
            else{
                max_res = max(max_res, prices[pointer2]-prices[pointer1]);
            }
            pointer2++;
        }
        return max_res;
    }
};